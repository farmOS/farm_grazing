<?php

/**
 * @file
 * Farm grazing install.
 */

/**
 * Implements hook_install().
 */
function farm_grazing_install() {

  // Create an initial set of animal types.
  $animal_types = array(
    array(
      'name' => 'Beef cattle, lactating',
      'dmi_factor' => 2.25,
    ),
    array(
      'name' => 'Beef cattle, growing and finishing, slaughter stock',
      'dmi_factor' => 2.3,
    ),
    array(
      'name' => 'Dairy steers',
      'dmi_factor' => 2.3,
    ),
    array(
      'name' => 'Dairy heifers',
      'dmi_factor' => 2.5,
    ),
    array(
      'name' => 'Dairy cows, dry (small or large breed)',
      'dmi_factor' => 1.8,
    ),
    array(
      'name' => 'Goats, weaned, slaughter or replacement stock',
      'dmi_factor' => 2.25,
    ),
    array(
      'name' => 'Goats, brood or lactating',
      'dmi_factor' => 4.0,
    ),
    array(
      'name' => 'Sheep, weaned, slaughter or replacement stock',
      'dmi_factor' => 3.3,
    ),
    array(
      'name' => 'Sheep, brood or lactating',
      'dmi_factor' => 3.65,
    ),
  );
  foreach ($animal_types as $type) {
    db_insert('farm_grazing_animal_types')
      ->fields($type)
      ->execute();
  }
}

/**
 * Implements hook_schema().
 */
function farm_grazing_schema() {

  $schema['farm_grazing_rotations'] = array(
    'description' => 'Defines one herd rotation in a paddock in a plan',
    'fields' => array(
      'id' => array(
        'description' => 'ID for this rotation',
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'plan_id' => array(
        'description' => 'FK reference to a plan',
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
      ),
      'herd_id' => array(
        'description' => 'FK reference to a herd',
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
      ),
      'paddock_id' => array(
        'description' => 'FK reference to paddock',
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
      ),
      'duration' => array(
        'description' => 'Planned number of grazing days in paddock for this herd',
        'type' => 'float',
        'unsigned' => TRUE,
      ),
      #
      # this is actually computed as plan start date + sum(paddock durations)
      # proceeding this rotation and adjusted for actuals
      #
      'start_date' => array(
        'description' => 'Planned start date for rotation into paddock',
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
        'default' => 0,
      ),
      'log_id' => array(
        'description' => 'FK reference to the movement log',
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('id'),
    'indexes' => array(
      'plan_id' => array('plan_id'),
      'herd_id' => array('herd_id'),
      'paddock_id' => array('paddock_id'),
      'log_id' => array('log_id'),
      'start_date' => array('start_date'),
    ),
  );

  // TODO: change start_date and end_date to support exclusions that are recurring

  $schema['farm_grazing_paddock_exclusions'] = array(
    'description' => 'Define general paddock exclusions',
    'fields' => array(
      'id' => array(
        'description' => 'Exclusion ID',
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'paddock_id' => array(
        'description' => 'FK reference to a paddock',
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
      ),
      'start_date' => array(
        'description' => 'Planned start date for exclusion from paddock',
        'type' => 'int',
      ),
      'end_date' => array(
        'description' => 'Planned end date for exclusion from paddock',
        'type' => 'int',
      ),
      'exclusion_type' => array(
        'description' => '0=livestock, 1=special attention',
        'type' => 'int',
        'not null' => TRUE,
        'default' => '0',
      ),
      'reason' => array(
        'description' => 'Description of reason for exclusion',
        'type' => 'varchar',
        'length' => '255',
      ),
    ),
    'primary key' => array('id'),
  );

  $schema['farm_grazing_plan_paddock'] = array(
    'description' => 'Relate paddocks to a plan and productivity quality',
    'fields' => array(
      'paddock_id' => array(
        'description' => 'FK reference to a paddock',
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
      ),
      'plan_id' => array(
        'description' => 'FK reference to a plan',
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
      ),
      'quality' => array(
        'description' => 'Relative paddock productivity quality (0-10)',
        'type' => 'float',
        'default' => '0.0',
      ),
    ),
    'primary key' => array('paddock_id', 'plan_id'),
  );

  $schema['farm_grazing_plan_recovery'] = array(
    'description' => 'Store min/max paddock recovery in days for a plan',
    'fields' => array(
      'plan_id' => array(
        'description' => 'FK reference to a plan',
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
      ),
      'month' => array(
        'description' => 'Year month as int like: YYYYMM',
        'type' => 'int',
        'not null' => TRUE,
        'default' => '0',
      ),
      'min_recovery' => array(
        'description' => 'Minimum paddock recovery in days for this month',
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
        'default' => '0',
      ),
      'max_recovery' => array(
        'description' => 'Minimum paddock recovery in days for this month',
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
        'default' => '0',
      ),
    ),
    'primary key' => array('plan_id', 'month'),
  );

  $schema['farm_grazing_herds'] = array(
    'description' => 'An arbitrary collection of farmOS groups that will be rotated together as a single herd.',
    'fields' => array(
      'plan_id' => array(
        'description' => 'FK reference to a plan',
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
      ),
      'herd_id' => array(
        'description' => 'FK reference to formOS group asset',
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
      ),
    ),
    'primary key' => array('plan_id', 'herd_id'),
  );

  $schema['farm_grazing_animal_types'] = array(
    'description' => 'List of animal types and their respective daily dry matter intake as percentage of weight.',
    'fields' => array(
      'type_id' => array(
        'description' => 'Type ID',
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'name' => array(
        'description' => 'Descriptive name for animal type',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
      ),
      'dmi_factor' => array(
        'description' => 'Daily Dry Matter Intake as percentage of body weight.',
        'type' => 'float',
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('type_id'),
    'unique keys' => array(
      'name' => array('name'),
    ),
  );

  return $schema;
}

/**
 * Change planned arrival and departure dates to timestamps in the database.
 */
function farm_grazing_update_7000(&$sandbox) {
  $result = db_query("SELECT * FROM {farm_asset_property} WHERE name IN ('farm_grazing_planned_arrival', 'farm_grazing_planned_departure')");
  foreach ($result as $row) {
    $row->value = strtotime($row->value);
    drupal_write_record('farm_asset_property', $row, array('id', 'name'));
  }
}

/**
 * Remove the weight column from {farm_grazing_rotations} table.
 */
function farm_grazing_update_7001(&$sandbox) {
  db_drop_field('farm_grazing_rotations', 'weight');
}

/**
 * Migrate paddock exclusions to plan considerations.
 */
function farm_grazing_update_7002(&$sandbox) {

  // Enable the Farm Plan Considerations module, if it isn't already.
  $module = 'farm_plan_consideration';
  if (!module_exists($module)) {
    module_enable(array($module));
  }

  // Load all records from the exclusions table.
  $result = db_query('SELECT * FROM {farm_grazing_paddock_exclusions}');

  // Iterate through the exclusions.
  foreach ($result as $record) {

    // Create a new consideration.
    $consideration = farm_plan_consideration_create('exclusion', $record->reason, $record->start_date, $record->end_date);

    // Link it to the paddock entity.
    $consideration->entities = array(
      'taxonomy_term' => array(
        $record->paddock_id
      ),
    );

    // Save the consideration.
    farm_plan_consideration_save($consideration);
  }

  // Drop the exclusions table.
  db_drop_table('farm_grazing_paddock_exclusions');
}
