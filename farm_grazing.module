<?php

/**
 * @file
 * Farm grazing module.
 */

include_once 'farm_grazing.features.inc';

/**
 * Implements hook_element_info_alter()
 * @TODO need to limit removing description to only table items
 */
function farm_grazing_element_info_alter(&$type) {
  if (isset($type['date_popup'])) {
    $type['date_popup']['#process'][] = 'farm_grazing_date_popup_process';
  }
}

function farm_grazing_date_popup_process($element, $form_state, $complete_form) {
  unset($element['date']['#description']);
  unset($element['time']['#description']);

  return $element;
}

/**
 * Implements hook_farm_ui_entities().
 */
function farm_grazing_farm_ui_entities() {
  return array(
    'farm_plan' => array(
      'grazing' => array(
        'label' => t('Grazing Plan'),
        'label_plural' => t('Grazing Plans'),
        'view' => 'farm_grazing_plan',
      ),
    ),
  );
}

/**
 * Implements hook_permission().
 */
function farm_grazing_permission() {
  $perms = array(
    'administer farm_grazing module' => array(
      'title' => t('Administer farm grazing module'),
    ),
  );
  return $perms;
}

/**
 * Implements hook_farm_access_perms().
 */
function farm_grazing_farm_access_perms($role) {
  $perms = array();

  // If the role is "Farm Manager", grant access to grazing configuration.
  if ($role == 'Farm Manager') {
    $perms[] = 'administer farm_grazing module';
  }

  return $perms;
}

/**
 * Implements hook_menu().
 */
function farm_grazing_menu() {

  // A menu entry with tabs.
  // For tabs we need at least 3 things:
  // 1) A parent MENU_NORMAL_ITEM menu item (examples/menu_example/tabs in this
  // example.)
  // 2) A primary tab (the one that is active when we land on the base menu).
  // This tab is of type MENU_DEFAULT_LOCAL_TASK.
  // 3) Some other menu entries for the other tabs, of type MENU_LOCAL_TASK.


  // Getting Started.
  // Planning Factors.
  // Are both handled as part of the grazing_plan entity

  // Paddocks.
  // This has sub menu items that deal with paddocks
  $items['farm/plan/%farm_plan/paddocks'] = array(
    'title' => 'Paddocks',
    'description' => 'Identify paddocks that should be available for this plan.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('farm_grazing_select_paddocks_form', 2),
    'access callback' => 'farm_grazing_plan_access',
    'access arguments' => array(2),
    'file' => 'farm_grazing.paddocks.select.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
  );

  // Herds.
  $items['farm/plan/%farm_plan/herds'] = array(
    'title' => 'Herds',
    'description' => 'Manage herds in the plan (Select/Add/Combine/Split/Ship)',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('farm_grazing_plan_herds_form', 2),
    'access callback' => 'farm_grazing_plan_access',
    'access arguments' => array(2),
    'file' => 'farm_grazing.herds.manage.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 20,
  );

  // Paddocks - Select
  $items['farm/plan/%farm_plan/paddocks/select'] = array(
    'title' => 'Select',
    'description' => '',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 10,
  );

  // Paddocks - Exclusions form.
  $items['farm/plan/%farm_plan/paddocks/exclusions'] = array(
    'title' => 'Exclusions',
    'description' => 'Define exclusion periods for paddocks.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('farm_grazing_exclusions_form', 2),
    'access callback' => 'farm_grazing_plan_access',
    'access arguments' => array(2),
    'file' => 'farm_grazing.paddocks.exclusions.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 20,
  );

  $items['farm/grazing/exclusions/%/edit'] = array(
    'title' => 'Edit/Delete Exclusion',
    'description' => 'Allow paddock exclusions to be edited or deleted.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('farm_grazing_exclusions_edit_form', 3),
    'access arguments' => array('edit any grazing plans'),
    'file' => 'farm_grazing.paddocks.exclusions.inc',
    'type' => MENU_CALLBACK,
  );

  // Paddocks - productivity.
  $items['farm/plan/%farm_plan/paddocks/productivity'] = array(
    'title' => 'Productivity',
    'description' => 'Set productivity for each paddock.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('farm_grazing_plan_productivity_form', 2),
    'access callback' => 'farm_grazing_plan_access',
    'access arguments' => array(2),
    'file' => 'farm_grazing.paddocks.productivity.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 30,
  );

  // Paddocks - Recovery.
  $items['farm/plan/%farm_plan/paddocks/recovery'] = array(
    'title' => 'Recovery',
    'description' => 'Set min and max recovery periods for paddocks.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('farm_grazing_plan_recovery_form', 2),
    'access callback' => 'farm_grazing_plan_access',
    'access arguments' => array(2),
    'file' => 'farm_grazing.paddocks.recovery.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 40,
  );

  // Paddocks - Summary.
  $items['farm/plan/%farm_plan/paddocks/summary'] = array(
    'title' => 'Summary',
    'description' => 'Review summary information about paddocks.',
    'page callback' => 'farm_grazing_plan_summary_page',
    'page arguments' => array(2),
    'access callback' => 'farm_grazing_plan_access',
    'access arguments' => array(2),
    'file' => 'farm_grazing.paddocks.summary.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 50,
  );

  // Herds - Management
  $items['farm/plan/%farm_plan/herds/manage'] = array(
    'title' => 'Manage',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 10,
  );

  $items['farm/grazing/plan/%farm_plan/herd/%/edit'] = array(
    'title' => 'Remove Herd From Plan',
    'description' => 'This herd will be removed from the plan',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('farm_grazing_plan_herd_edit_form', 3, 5),
    'access arguments' => array('edit any grazing plans'),
    'file' => 'farm_grazing.herds.manage.inc',
    'type' => MENU_CALLBACK,
  );

  // Herds - Historical grazing patterns.
  $items['farm/plan/%farm_plan/herds/history'] = array(
    'title' => 'History',
    'description' => 'Review historical grazing patterns',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('farm_grazing_plan_history_form', 2),
    'access callback' => 'farm_grazing_plan_access',
    'access arguments' => array(2),
    'file' => 'farm_grazing.herds.history.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 30,
  );

  // Herds - Rotations.
  $items['farm/plan/%farm_plan/herds/rotations'] = array(
    'title' => 'Rotations',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('farm_grazing_plan_rotations_form', 2),
    'access callback' => 'farm_grazing_plan_access',
    'access arguments' => array(2),
    'file' => 'farm_grazing.herds.rotations.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 40,
  );

  // Rotation delete callback.
  $items['farm/plan/%farm_plan/herds/rotations/%/delete'] = array(
    'title' => 'Paddocks',
    'description' => 'Remove paddock from herd rotations.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('farm_grazing_plan_rotation_delete_form', 2, 5),
    'access arguments' => array('edit any grazing plans'),
    'file' => 'farm_grazing.herds.rotations.inc',
    'type' => MENU_CALLBACK,
  );

  // Callback for generating a paddock rotation image.
  // Arguments are:
  //   3: farm plan
  //   5: paddock ID
  //   6: start timestamp
  //   7: end timestamp
  $items['farm/grazing/plan/%farm_plan/plot/%/%/%'] = array(
    'page callback' => 'farm_grazing_plan_plot',
    'page arguments' => array(3, 5, 6, 7),
    'access callback' => 'farm_grazing_plan_access',
    'access arguments' => array(3),
    'file' => 'farm_grazing.herds.rotations.plot.inc',
    'type' => MENU_CALLBACK,
  );

  // -------------- config forms --------------------------

  // Animal type configuration.
  $items['admin/config/farm/grazing_animal_types'] = array(
    'title' => 'Grazing animal types',
    'description' => 'Manage animal types used in the grazing planning process.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('farm_grazing_config_animal_types_form'),
    'access arguments' => array('administer farm_grazing module'),
    'file' => 'farm_grazing.admin.inc',
  );

  return $items;
}

/**
 * Access callback function for grazing plan pages.
 */
function farm_grazing_plan_access($plan, $account = NULL) {

  // If the plan is not a grazing plan, deny access.
  if ($plan->type != 'grazing') {
    return FALSE;
  }

  // Otherwise, check to see if the user has access to edit grazing plans.
  return user_access('edit any grazing farm plans', $account);
}

/**
 * Load an array of grazing plan options.
 */
function farm_grazing_plan_options() {

  // Start with an empty array.
  $plan_options = array();

  // Query the database for plans.
  $query = db_query("SELECT id, name FROM {farm_plan} WHERE type = 'grazing' AND active = 1");

  // Build a list of plan options.
  $records = $query->fetchAll();
  foreach ($records as $record) {
    $plan_options[$record->id] = $record->name;
  }

  // Return the options array.
  return $plan_options;
}

/**
 * Load an array of animal types.
 *
 * @return array
 *   Returns an array of animal types.
 */
function farm_grazing_animal_types() {
  $types = array();
  $result = db_query('SELECT * FROM farm_grazing_animal_types ORDER BY name DESC');
  foreach ($result as $record) {
    if (!empty($record->type_id)) {
      $types[$record->type_id] = (array) $record;
    }
  }
  return $types;
}

/**
 * Implements hook_entity_view_alter().
 */
function farm_grazing_entity_view_alter(&$build, $type) {

  // If it's not a farm_asset, or if the entity object is not available, bail.
  if ($type != 'farm_asset' || empty($build['#entity'])) {
    return;
  }

  // Alias the asset variable.
  $asset = $build['#entity'];

  // If it isn't an animal asset, bail.
  if ($asset->type != 'animal') {
    return;
  }

  // Start an empty output string.
  $output = '';

  // Define the properties we care about.
  $properties = array(
    'animal_type',
    'planned_arrival',
    'planned_departure',
  );

  // Iterate through the properties.
  foreach ($properties as $name) {

    // Load the property.
    $property = farm_asset_property_get($asset->id, 'farm_grazing_' . $name);

    // If it doesn't exist, skip it.
    if (empty($property)) {
      continue;
    }

    // Add output based on the property.
    $label = '';
    $value = '';
    switch ($name) {
      case 'animal_type':
        $types = farm_grazing_animal_types();
        if (!empty($types[$property]['name'])) {
          $label = t('Grazing animal type');
          $value = $types[$property]['name'];
        }
        break;
      case 'planned_arrival':
        $label = t('Planned arrival');
        $value = $property;
        break;
      case 'planned_departure':
        $label = t('Planned departure');
        $value = $property;
        break;
    }

    // If a label and value are available, add it to the output.
    if (!empty($label) && !empty($value)) {
      $output .= '<div><strong>' . $label . ': </strong> ' . $value . '</div>';
    }
  }

  // If there is output, add it to the build array.
  if (!empty($output)) {
    $build['grazing_properties'] = array(
      '#markup' => $output,
      '#prefix' => '<div class="grazing-properties">',
      '#suffix' => '</div>',
      '#weight' => 100,
    );
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function farm_grazing_form_farm_asset_form_alter(&$form, &$form_state, $form_id) {

  // Get the farm asset entity from the form.
  $asset = $form['farm_asset']['#value'];

  // If the asset is not an animal, bail.
  if (empty($asset->type) || $asset->type != 'animal') {
    return;
  }

  // Add a "Grazing" fieldset.
  $form['farm_grazing'] = array(
    '#type' => 'fieldset',
    '#title' => t('Grazing'),
    '#description' => t('If this animal is used in a grazing plan, the following information is required for plan calculations.'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#weight' => 100,
  );

  // Build a list of animal type options.
  $animal_types = farm_grazing_animal_types();
  $animal_type_options = array('');
  foreach ($animal_types as $animal_type) {
    $animal_type_options[$animal_type['type_id']] = $animal_type['name'];
  }

  // Animal type dropdown.
  $form['farm_grazing']['farm_grazing_animal_type'] = array(
    '#type' => 'select',
    '#title' => t('Animal type'),
    '#description' => t('Select the type of animal that this @asset_type represents. This will determine the dry-matter intake requirements for this @asset_type.', array('@asset_type' => $asset->type)),
    '#options' => $animal_type_options,
    '#default_value' => farm_asset_property_get($asset->id, 'farm_grazing_animal_type'),
  );

  // Planned arrival date.
  $form['farm_grazing']['farm_grazing_planned_arrival'] = array(
    '#type' => 'date_select',
    '#title' => t('Planned arrival date'),
    '#default_value' => farm_asset_property_get($asset->id, 'farm_grazing_planned_arrival'),
    '#date_format' => 'Y-m-d',
    '#date_label_position' => 'within',
    '#date_year_range' => '-3:+10',
  );

  // Planned departure date.
  $form['farm_grazing']['farm_grazing_planned_departure'] = array(
    '#type' => 'date_select',
    '#title' => t('Planned departure date'),
    '#default_value' => farm_asset_property_get($asset->id, 'farm_grazing_planned_departure'),
    '#date_format' => 'Y-m-d',
    '#date_label_position' => 'within',
    '#date_year_range' => '-3:+10',
  );

  // Add a submit handler.
  $form['actions']['submit']['#submit'][] = 'farm_grazing_asset_form_submit';

  // Add to the "General" group.
  $form['#group_children']['farm_grazing'] = 'group_farm_general';
}

/**
 * Submit handler for saving grazing properties of an asset.
 *
 * @param array $form
 *   The form array.
 * @param array $form_state
 *   The form state array.
 */
function farm_grazing_asset_form_submit(array $form, array &$form_state) {

  // If an asset doesn't exist, bail.
  if (empty($form_state['values']['farm_asset'])) {
    return;
  }

  // Grab the asset.
  $asset = $form_state['values']['farm_asset'];

  // Set asset properties.
  $properties = array(
    'farm_grazing_animal_type',
    'farm_grazing_planned_arrival',
    'farm_grazing_planned_departure',
  );
  foreach ($properties as $name) {
    if (!empty($form_state['values'][$name])) {
      farm_asset_property_set($asset->id, $name, $form_state['values'][$name]);
    }
  }
}

/**
 * Implements hook_entity_view().
 */
function farm_grazing_entity_view($entity, $type, $view_mode, $langcode) {

  // If the entity is not a grazing plan, bail.
  if (!($type == 'farm_plan' && $entity->type == 'grazing')) {
    return;
  }

  // Add introductory text.
  $entity->content['introduction'] = array(
    '#markup' => t('<h1>Getting Started</h1>
      <p>Welcome to the Holistic Grazing Planning Application.</p>
      <h2>For the First Time</h2>
      <p>To get started, you need to define your ranch\'s paddocks. This is done on the "Areas" tab at the top of the page. This needs to be done once initially and anytime you decide to change the layout of paddocks on the ranch.</p>
      <h2>Making a Plan</h2>
      <p>This is the "active" plan you are working with. The planning process follows the order of the tabs from left to right and top to bottom. You can revisit any tab as needed to review or change your inputs.</p>
      <p>The View will bring you back here and the Edit tab allows you edit information about the plan.</p>
      <p>Next Steps: Simple go to the next tab "Concerns" and work your way across the planning tabs. The Paddocks and Herds tabs both have sub-menu steps that you should work left to right.</p>'),
    '#weight' => 100,
  );

  // Add concerns form.
  module_load_include('inc', 'farm_grazing', 'farm_grazing.concerns');
  $entity->content['concerns'] = drupal_get_form('farm_grazing_plan_concerns_form', $entity);
  $entity->content['concerns']['#weight'] = 101;

  // Add "Implement the plan" content.
  $entity->content['implement'] = array(
    '#markup' => '<h1>' . t('Implement the plan') . '</h1>' .
      '<h2>' .t('Recheck your plan') . '</h2>' .
      '<p>' . t('Review your plan regularly, print out reports, check that the plan is on track and make adjustments as needed.') . '</p>' .
      '<h2>' . t('Monitor Your Paddocks') . '</h2>' .
      '<p>' . t('Monitor the growth and recovery of your paddocks. Also assess the quality of the paddock you are moving the herd to and record it as a monitor event here.') . '</p>' .
      '<ul>' .
      '<li><a href="' . base_path() . 'farm/assets/groups">' . t('Herd movements') . '</a></li>' .
      '<ul>' .
      '<li>' . t('Click Herd movements link above') . '</li>' .
      '<li>' . t('Select a herd to move') . '</li>' .
      '<li>' . t('Click Add activity') . '</li>' .
      '<li>' . t('Click Movements') . '</li>' .
      '<li>' . t('Select paddock for "Movement to"') . '</li>' .
      '<li>' . t('Click "Save Log"') . '</li>' .
      '</ul>' .
      '<li><a href="' . base_path() . 'farm/area">' . t('Observations on paddock leaving') . '</a></li>' .
      '<ul><ul>' .
      '<li>' . t('Select paddock you are making an observation of') . '</li>' .
      '<li>' . t('Click "Add Observation"') . '</li>' .
      '<li>' . t('Use "General" for errors or general text comments') . '</li>' .
      '<li>' . t('Use "Quantity"->"Add another item" to add quantity observations') . '</li>' .
      '</ul></ul>' .
      '<ul>' .
      '<li>' . t('Residual feed left on the paddock') . '</li>' .
      '<li>' . t('The current growth rate on the paddock') . '</li>' .
      '<li>' . t('Was a serious error made on the paddock') . '</li>' .
      '<li>' . t('Soil moisture') . '</li>' .
      '</ul>' .
      '<li><a href="' . base_path() . 'farm/area">' . t('Observations on paddock entering') . '</a></li>' .
      '<ul><ul>' .
      '<li>' . t('Select paddock you are making an observation of') . '</li>' .
      '<li>' . t('Click "Add Observation"') . '</li>' .
      '<li>' . t('Use "General" for errors or general text comments') . '</li>' .
      '<li>' . t('Use "Quantity"->"Add another item" to add quantity observations') . '</li>' .
      '</ul></ul>' .
      '<ul>' .
      '<li>' . t('Quality of paddock') . '</li>' .
      '<li>' . t('Estimate of feed on paddock') . '</li>' .
      '<li>' . t('Soil moisture') . '</li>' .
      '</ul>' .
      '</ul>' .
      '<h2>' . t('How to Replan if Needed') . '</h2>' .
      '<p>' . t('You can make changes to your plan at any time. Actual events obviously can not be changed, but you can replan future events. There are two approaches to replanning.') . '<ol>' .
      '<li>' . t('is to just update the current plan for minor changes') . '</li>' .
      '<li>' . t('another is to create a new plan, for major changes, based on the remaining days and abandon the old plan for now.') . '</li>' .
      '<p>' . t('The advantage to making a new plan is that you can keep the original plan around for archival purposes and look at it in the future to re-assess assumptions or conditions that changed and forced the replan. On the new plan, you might need to sell stock to reduce the requirements for intake if you are in a drought or had a fire that burnt through some padocks or add more paddocks that you had not planned to use in the original plan. If you only need to make minor changes then use your existing plan, otherwise start a new plan.') . '</p>',
    '#weight' => 102,
  );
}

/**
 * Implemants hook_theme
 */
function farm_grazing_theme() {
  return array(
    'farm_grazing_paddocks_productivity' => array(
      // The renderable element is the form.
      'render element' => 'form',
      'file' => 'farm_grazing.paddocks.productivity.inc',
    ),
    'farm_grazing_paddocks_recovery' => array(
      'render element' => 'form',
      'file' => 'farm_grazing.paddocks.recovery.inc',
    ),
    'farm_grazing_plan_herds_form' => array(
      'render element' => 'form',
      'file' => 'farm_grazing.herds.manage.inc',
    ),
    'farm_grazing_plan_rotations_form' => array(
      'render element' => 'form',
      'file' => 'farm_grazing.herds.rotations.inc',
    ),
    'farm_grazing_config_animal_types_form' => array(
      'render element' => 'form',
      'file' => 'farm_grazing.admin.inc',
    ),
  );
}

/**
 * Implements hook_help
 *
 * Displays help and module information
 *
 * @param path
 *   Which path of the site we're using to display help
 * @param arg
 *   Array that holds the current path as returned from arg() function
 */
function farm_grazing_help($path, $arg) {
  switch ($path) {
    case 'farm/plans/grazing':
      return '<p>' . t('Select an existing plan or create a new plan.') .
        '</p><p>' . t('The planning factors are an important part of building your plan. You can edit these by clicking the "Edit" tab at any time. Read the description under the form field for "Planning factors".') . '</p>';
    case 'farm/plan/%':
    case 'farm/plan/%/default':
      return '<p>'. t('To build your plan follow the tabs "Concerns", "Paddocks", "Herds" and "Implement" and follow the sub-menus from left to right. This will walk you through the Holistic Grazing process to generate a plan. As things change you can revisit any of these tabs to make changes to your plan.') . '</p>';
    case 'farm/plan/%/paddocks':
    case 'farm/plan/%/paddocks/default':
      return '<p>' . t('Define your paddocks in the') . ' <a href="' . base_path() . 'farm/areas">Areas</a> '. t('tab above. Select which paddocks you want available for use in this plan here and then use tabs "Exclusions", "Productivity", "Recovery" and "Summary" to add additional information about your paddocks.') . '</p>';
    case 'farm/plan/%/paddocks/exclusions':
      return '<p>' . t('Enter dates when a paddock can not under any circumstanceces have a herd on it and select type "Livestock". Also enter dates for paddocks that need special attention and select type "Special". Such paddocks could include a sacrificial paddock where you plan to run some animals on continuous graze, bare, eroding ground that needs healing, areas you want to rest for brush cover for wildlife, areas where you need to remove forage for fire protection, paddocks you plan to strip graze. Review the list of planning factors.') . '</p>' .
      '<p>' . t('Click on the paddock name to edit or delete it.') . '</p>';
    case 'farm/plan/%/paddocks/productivity':
      return '<p>' . t('For Forage Quality, you should enter ADA/H for each paddock, or rate it 1-10.') . '</p><p>' . t('Est. Relative Quality is the estimated animals days for the paddock based on Forage Quality if you entered a value in ADA/H, but if you entered a rating, then the number will be a relative ranking of the amount of forage each paddock can give relative to the other paddocks.') . '</p>';
    case 'farm/plan/%/paddocks/recovery':
      return '<p>' . t('Enter your minimum and maximum recovery periods (in days) for each planned month. Unless you have a great many paddocks per herd and can safely choose a single recovery period, you will have to determine the expected plant recovery period under fast growth conditions and the expected plant recovery period under slow growth conditions.') . '</p><p>'. t('If you have not defined any herds yet, we assume one herd. This page will automatically adjust for multiple herds once you define them, so check back once you have defined herds.') . '</p>';
    case 'farm/plan/%/paddocks/summary':
      return '<p>' . t('Use the Check Min/Max Recovery Period below and if any recovery period is much too short, you must add days to the minimum grazing periods in other paddocks that can absorb them. Follow the same procedure for maximum grazing periods, though the problems will probably be less critical if you can\'t make complete adjustments.') . '</p>';
    case 'farm/plan/%/herds':
    case 'farm/plan/%/herds/default':
      return '<p>' . t('A herd is defined as a group of animals that will be rotated between paddock to together regardless of the make up of animals in the herd.') . '</p><p>' . t('Most smaller ranches will only have a single herd as you will need more paddocks to support multiple herds and allow for adequate recovery periods of the paddocks.') . '</p><p>' . t('If you are new to this planning method or you have a smaller ranch, try to keep your plan simple to start with and built it based on a single herd.') . '</p><p>' . t('You can define animals ') . '<a href="' . base_path() . 'farm/asset/add/animal?destination=farm/assets/animals" target="_new">' . t('HERE') . '</a> ' . t('and assign them to a group. You will need to enter all of the following fields:') . '<ul>' .
      '<li>' . t('Name') . '</li>' .
      '<li>' . t('Species/breed') . '</li>' .
      '<li>' . t('Description (optional)') . '</li>' .
      '<li>' . t('Location (optional)') . '</li>' .
      '<li>' . t('Weight') . '</li>' .
      '<li>' . t('Inventory (Head count)') . '</li>' .
      '<li>' . t('Group memebership (Herd name)') . '</li>' .
      '<ul>' .
      '<li>' . t('Select an existing group (Herd)') . '</li>' .
      '<li>' . t('or Create a new group (Herd)') . '</li>' .
      '</ul>' .
      '<li>' . t('Grazing') . '</li>' .
      '<ul>' .
      '<li>' . t('Animal type') . '</li>' .
      '<li>' . t('Planned arrival date') . '</li>' .
      '<li>' . t('Planned departure date') . '</li>' .
      '</ul>' .
      '</ul></p>'
      ;
    case 'farm/plan/%/herds/paddocks':
      return '<p>' . t('Add or remove paddocks from each herd in your plan. In the next two steps you will review the historical grazing patterns and then order the paddock rotations for each herd.') . '</p>';
    case 'farm/plan/%/herds/history':
      return '<p>' . t('Skip this step if this is your first grazing plan. Otherwise, check paddock by paddock over previous grazing charts for evidence of inappropriate heavy use of individual paddocks, repeated early or late season use of particular paddocks, or of paddocks that failed to receive adequate recovery time in the recent past. If paddocks were marked as heavily grazed, especially early or late in the season last year, exclude them in the early and late growing season this year to avoid repetition.') . '</p><p>' . t('This table counts the frequency of historical use in the given months. Ideally one would like to have these numbers consistent across the months in the plan over the long term. In the short term avoid reuse at start or end of the growing season. Also if a paddock has been used a lot in a given month then avoid using that month also.') . '</p>';
    case 'farm/plan/%/herds/rotations':
      return '<p>' . t('You can reorder the paddocks by grabbing the row and dragging it up or down in the table or enter numerical values in the row weights column. The calendar has the various planning events shown on it. The green is where that paddock will get grazed. You avoid trying to graze the paddock where you have an exclusion marked in red. Move it up/down to avoid the exclusion.') . '</p><p>' . t('You should also look back at the Herds/History tab to avoid bad patterns like repeatitive grazing of the the same paddock at the start or end of a season or is getting more heavily used than others.') . '</p><p>' .t('Purple sections are where there are management events and orange areas indicate average paddock recovery time frames.');
    case 'farm/plan/%/implement':
    case 'farm/plan/%/implement/default':
      return '<p>' . t('TODO') . '</p>';
  }
}

/**
 * Implements hook_entity_update().
 */
function farm_grazing_entity_update($entity, $type) {

  // Only act on farm asset entities.
  if ($type != 'farm_asset') {
    return;
  }

  // Delegate out to our audit function.
  farm_grazing_plan_asset_update($entity);
}

/**
 * Implements hook_entity_update().
 */
function farm_grazing_entity_delete($entity, $type) {

  // Only act on group or animal assets.
  if ($type != 'farm_asset') {
    return;
  }

  // Delegate out to our audit function.
  farm_grazing_plan_asset_update($entity);
}

/**
 * Perform checks to see if a group/animal asset is part of a plan, and if
 * updating/deleting it will affect that plan.
 *
 * @param $asset
 *   The asset that was updated/deleted.
 */
function farm_grazing_plan_asset_update($asset) {

  // We only care about group and animal assets.
  if (!($asset->type == 'group' || $asset->type == 'animal')) {
    return;
  }

  /**
   * @todo
   * Perform logic to see if this asset is part of a plan, and whether or not
   * editing/deleting this asset will affect the plan.
   *
   * But for now... just show a message.
   */
  drupal_set_message(t('If this asset is part of a grazing plan, you should check to see if your change affects that plan.'), 'warning');
}
