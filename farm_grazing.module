<?php

/**
 * @file
 * Farm grazing module.
 */

include_once 'farm_grazing.features.inc';

// this breaks things, but it seems to work without it ??
//drupal_add_js(drupal_get_path('module', 'farm_grazing') . 'help-toggle.js');

/**
 * Implements hook_farm_ui_entities().
 */
function farm_grazing_farm_ui_entities() {
  return array(
    'farm_plan' => array(
      'grazing' => array(
        'label' => t('Grazing Plan'),
        'label_plural' => t('Grazing Plans'),
        'view' => 'farm_grazing_plan',
      ),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function farm_grazing_menu() {

  // A menu entry with tabs.
  // For tabs we need at least 3 things:
  // 1) A parent MENU_NORMAL_ITEM menu item (examples/menu_example/tabs in this
  // example.)
  // 2) A primary tab (the one that is active when we land on the base menu).
  // This tab is of type MENU_DEFAULT_LOCAL_TASK.
  // 3) Some other menu entries for the other tabs, of type MENU_LOCAL_TASK.


  // Getting Started.
  // Planning Factors.
  // Are both handled as part of the grazing_plan entity

  // Management concerns.
  $items['farm/plan/%farm_plan/concerns'] = array(
    'title' => 'Concerns',
    'description' => 'Define management and ranch events that could impact planning.',
    'page callback' => 'farm_grazing_plan_concerns_page',
    'page arguments' => array(2),
    'access callback' => 'farm_grazing_plan_access',
    'access arguments' => array(2),
    'file' => 'farm_grazing.pages.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
  );

  // Paddocks.
  // This has sub menu items that deal with paddocks
  $items['farm/plan/%farm_plan/paddocks'] = array(
    'title' => 'Paddocks',
    'description' => 'Identify paddocks that should be available for this plan.',
    'page arguments' => array(2),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('farm_grazing_select_paddocks_form', 2),
    'access callback' => 'farm_grazing_plan_access',
    'access arguments' => array(2),
    'file' => 'farm_grazing.pages.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 20,
  );

  // Herds.
  $items['farm/plan/%farm_plan/herds'] = array(
    'title' => 'Herds',
    'description' => 'Manage herds in the plan (Select/Add/Combine/Split/Ship)',
    'page callback' => 'farm_grazing_plan_herds_page',
    'page arguments' => array(2),
    'access callback' => 'farm_grazing_plan_access',
    'access arguments' => array(2),
    'file' => 'farm_grazing.pages.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 30,
  );

  // Implement.
  $items['farm/plan/%farm_plan/implement'] = array(
    'title' => 'Implement',
    'description' => 'Implement the plan and monitor results.',
    'page callback' => 'farm_grazing_plan_implement_page',
    'page arguments' => array(2),
    'access callback' => 'farm_grazing_plan_access',
    'access arguments' => array(2),
    'file' => 'farm_grazing.pages.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 40,
  );

  // Paddocks - Select
  $items['farm/plan/%farm_plan/paddocks/select'] = array(
    'title' => 'Select',
    'description' => '',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 10,
  );

  // Paddocks - Exclusions form.
  $items['farm/plan/%farm_plan/paddocks/exclusions'] = array(
    'title' => 'Exclusions',
    'description' => 'Define exclusion periods for paddocks.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('farm_grazing_exclusions_form'),
    'access callback' => 'farm_grazing_plan_access',
    'access arguments' => array(2),
    'file' => 'farm_grazing.pages.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 20,
  );

  // Paddocks - productivity.
  $items['farm/plan/%farm_plan/paddocks/productivity'] = array(
    'title' => 'Productivity',
    'description' => 'Set productivity for each paddock.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('farm_grazing_plan_productivity_form', 2),
    'access callback' => 'farm_grazing_plan_access',
    'access arguments' => array(2),
    'file' => 'farm_grazing.pages.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 30,
  );

  // Paddocks - Recovery.
  $items['farm/plan/%farm_plan/paddocks/recovery'] = array(
    'title' => 'Recovery',
    'description' => 'Set min and max recovery periods for paddocks.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('farm_grazing_plan_recovery_form', 2),
    'access callback' => 'farm_grazing_plan_access',
    'access arguments' => array(2),
    'file' => 'farm_grazing.pages.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 40,
  );

  // Paddocks - Summary.
  $items['farm/plan/%farm_plan/paddocks/summary'] = array(
    'title' => 'Summary',
    'description' => 'Review summary information about paddocks.',
    'page callback' => 'farm_grazing_plan_summary_page',
    'page arguments' => array(2),
    'access callback' => 'farm_grazing_plan_access',
    'access arguments' => array(2),
    'file' => 'farm_grazing.pages.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 50,
  );

  // Herds - Management
  $items['farm/plan/%farm_plan/herds/manage'] = array(
    'title' => 'Manage',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 10,
  );

  // Herds - Paddocks.
  $items['farm/plan/%farm_plan/herds/paddocks'] = array(
    'title' => 'Paddocks',
    'description' => 'Select paddocks for herd rotations.',
    'page callback' => 'farm_grazing_plan_herds_paddocks_page',
    'page arguments' => array(2),
    'access callback' => 'farm_grazing_plan_access',
    'access arguments' => array(2),
    'file' => 'farm_grazing.pages.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 20,
  );

  // Herds - Historical grazing patterns.
  $items['farm/plan/%farm_plan/herds/history'] = array(
    'title' => 'History',
    'description' => 'Review historical grazing patterns',
    'page callback' => 'farm_grazing_plan_history_page',
    'page arguments' => array(2),
    'access callback' => 'farm_grazing_plan_access',
    'access arguments' => array(2),
    'file' => 'farm_grazing.pages.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 30,
  );

  // Herds - Rotations.
  $items['farm/plan/%farm_plan/herds/rotations'] = array(
    'title' => 'Rotations',
    'page callback' => 'farm_grazing_plan_rotations_page',
    'page arguments' => array(2),
    'access callback' => 'farm_grazing_plan_access',
    'access arguments' => array(2),
    'file' => 'farm_grazing.pages.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 40,
  );

  // Implement - Monitor
  $items['farm/plan/%farm_plan/implement/monitor'] = array(
    'title' => 'Monitor',
    'description' => 'Monitor paddocks and herds.',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 10,
  );

  // Implement - Status
  $items['farm/plan/%farm_plan/implement/status'] = array(
    'title' => 'Plan Status',
    'description' => 'Get status of the current plan.',
    'page callback' => 'farm_grazing_plan_implement_status_page',
    'page arguments' => array(2),
    'access callback' => 'farm_grazing_plan_access',
    'access arguments' => array(2),
    'file' => 'farm_grazing.pages.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 20,
  );

  return $items;
}

/**
 * Access callback function for grazing plan pages.
 */
function farm_grazing_plan_access($plan, $account = NULL) {

  // If the plan is not a grazing plan, deny access.
  if ($plan->type != 'grazing') {
    return FALSE;
  }

  // Otherwise, check to see if the user has access to edit grazing plans.
  return user_access('edit any grazing farm plans', $account);
}

/**
 * Load an array of grazing plan options.
 */
function farm_grazing_plan_options() {

  // Start with an empty array.
  $plan_options = array();

  // Query the database for plans.
  $query = db_query("SELECT id, name FROM {farm_plan} WHERE type = 'grazing' AND active = 1");

  // Build a list of plan options.
  $records = $query->fetchAll();
  foreach ($records as $record) {
    $plan_options[$record->id] = $record->name;
  }

  // Return the options array.
  return $plan_options;
}

/**
 * Implements hook_entity_view().
 */
function farm_grazing_entity_view($entity, $type, $view_mode, $langcode) {

  // If the entity is not a grazing plan, bail.
  if (!($type == 'farm_plan' && $entity->type == 'grazing')) {
    return;
  }

  // Add introductory text.
  $entity->content['introduction'] = array(
    '#markup' => t('<h1>Getting Started</h1>
      <p>Welcome to the Holistic Grazing Planning Application.</p>
      <h1>For the First Time</h1>
      <p>To get started, you need to define your ranch\'s paddocks. This is done on the "Areas" tab at the top of the page. This needs to be done once initially and anytime you decide to change the layout of paddocks on the ranch.</p>
      <h1>Making a New Plan</h1>
      <p>If you have already defined your Paddocks for the ranch, then you need to create a Plan, use the [Manage Plan] tab on the left, or select an existing plan from the drop down menu. When you start the application it will automatically remember the plan you used last.</p>
      <p>Now that you have a "active" plan to work with, you can follow the planning process by using the tabs on the left in "Grazing Plan". The process follows the order of the tabs from top to bottom. You can revisit any tab as needed to review or change your inputs.</p>
      <p>The "Calendar" tab on the left will be an essential part of the planning application. Most elements of your plan will have dates associated with them and anything with a related date or date range will get rendered in the Calendar. This provides you with critical information like whether events conflict time-wise and may need to be moved around or other actions may need to be planned to accomdate the conflicts.</p>
      <p>Next Steps: Simple go to the next tab "Identify Planning Factors" and work your way down the planning list. Each tab has a context specific [Help] button to discuss issues and concerns related to that planning step.</p>'),
    '#weight' => 100,
  );
}

/**
 * Implemants hook_theme
 */
function farm_grazing_theme() {
  return array(
    'farm_grazing_paddocks_productivity' => array(
      // The renderable element is the form.
      'render element' => 'form',
    ),
    'farm_grazing_paddocks_recovery' => array(
        'render element' => 'form',
    ),
  );
}

/**
 * Implements hook_theme for farm_grazing_paddocks_productivity
 */
function theme_farm_grazing_paddocks_productivity(&$vars) {

  //kpr($vars);

  $form = $vars['form'];

  $rows = array();
  foreach (element_children($form) as $key) {
    $rows[] = array(
      render($form[$key]['name']),
      render($form[$key]['quality']),
      render($form[$key]['total']),
    );
  }

  $header = $form['#header'];

  return theme('table', array(
    'header' => $header,
    'rows' => $rows,
    'submit' => render($form['submit']),
    )
  );
}

/**
 * Implements hook_theme for farmgrazing_paddocks_recovery
 */
function theme_farm_grazing_paddocks_recovery(&$vars) {

  //kpr($vars);

  $form = $vars['form'];

  $rows = array();
  foreach (element_children($form) as $key) {
    $rows[] = array(
      render($form[$key]['month']),
      render($form[$key]['min']),
      render($form[$key]['max']),
    );
  }

  $header = $form['#header'];

  return theme('table', array(
    'header' => $header,
    'rows' => $rows,
    'submit' => render($form['submit']),
    )
  );
}

/**
 * Implements hook_help
 *
 * Displays help and module information
 *
 * @param path
 *   Which path of the site we're using to display help
 * @param arg
 *   Array that holds the current path as returned from arg() function
 */
function farm_grazing_help($path, $arg) {
  switch ($path) {
    case 'farm/plans/grazing':
      return '<p>' . t('Select an existing plan or create a new plan.') .
        '</p><p>' . t('The planning factors are an important part of building your plan. You can edit these by clicking the "Edit" tab at any time. Read the description under the form field for "Planning factors".') . '</p>';
    case 'farm/plan/%':
    case 'farm/plan/%/default':
      return '<p>'. t('To build your plan follow the tabs "Concerns", "Paddocks", "Herds" and "Implement" and follow the sub-menus from left to right. This will walk you through the Holistic Grazing process to generate a plan. As things change you can revisit any of these tabs to make changes to your plan.') . '</p>';
    case 'farm/plan/%/paddocks':
    case 'farm/plan/%/paddocks/default':
      return '<p>' . t('Define your paddocks in the <a href="/farm/areas">Areas</a> tab above. Select which paddocks you want available for use in this plan here and then use tabs "Exclusions", "Productivity", "Recovery" and "Summary" to add additional information about your paddocks.') . '</p>';
    case 'farm/plan/%/paddocks/exclusions':
      return '<p>' . t('Set dates for paddocks where you want to exclude animal grazing. Check your Planning Factors.') . '</p>';
    case 'farm/plan/%/paddocks/productivity':
      return '<p>' . t('For Forage Quality, you should enter ADA/H for each paddock, or rate it 1-10.') . '</p><p>' . t('Est. Relative Quality is the estimated animals days for the paddock based on Forage Quality if you entered a value in ADA/H, but if you entered an rating, then the number will be a relative ranking of the amount of forage each paddock can give relative to the other paddocks.') . '</p>';
    case 'farm/plan/%/paddocks/recovery':
      return '<p>' . t('Enter your minimum and maximum recovery periods (in days) for each planned month. Unless you have a great many paddocks per herd and can safely choose a single recovery period, you will have to determine the expected plant recovery period under fast growth conditions and the expected plant recovery period under slow growth conditions.') . '</p>';
    case 'farm/plan/%/paddocks/summary':
      return '<p>' . t('TODO') . '</p>';
    case 'farm/plan/%/herds':
    case 'farm/plan/%/herds/default':
      return '<p>' . t('TODO') . '</p>';
    case 'farm/plan/%/herds/paddocks':
      return '<p>' . t('TODO') . '</p>';
    case 'farm/plan/%/herds/history':
      return '<p>' . t('TODO') . '</p>';
    case 'farm/plan/%/herds/rotations':
      return '<p>' . t('TODO') . '</p>';
    case 'farm/plan/%/implement':
    case 'farm/plan/%/implement/default':
      return '<p>' . t('TODO') . '</p>';
    case 'farm/plan/%/implement/status':
      return '<p>' . t('TODO') . '</p>';
  }
}

